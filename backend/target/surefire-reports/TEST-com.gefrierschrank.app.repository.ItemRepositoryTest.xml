<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.gefrierschrank.app.repository.ItemRepositoryTest" time="1.884" tests="19" errors="0" skipped="0" failures="5">
  <properties>
    <property name="java.specification.version" value="24"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/test-classes:/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/classes:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/maik.hirthe/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/maik.hirthe/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/maik.hirthe/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/maik.hirthe/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/maik.hirthe/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/maik.hirthe/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/maik.hirthe/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/maik.hirthe/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/maik.hirthe/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/maik.hirthe/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/maik.hirthe/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/maik.hirthe/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/maik.hirthe/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/maik.hirthe/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/maik.hirthe/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/maik.hirthe/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/maik.hirthe/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.2.0/spring-boot-starter-webflux-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.2.0/spring-boot-starter-reactor-netty-3.2.0.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.1.13/reactor-netty-http-1.1.13.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-http/4.1.101.Final/netty-codec-http-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-common/4.1.101.Final/netty-common-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-buffer/4.1.101.Final/netty-buffer-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport/4.1.101.Final/netty-transport-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec/4.1.101.Final/netty-codec-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-handler/4.1.101.Final/netty-handler-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-http2/4.1.101.Final/netty-codec-http2-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns/4.1.101.Final/netty-resolver-dns-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver/4.1.101.Final/netty-resolver-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-dns/4.1.101.Final/netty-codec-dns-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.101.Final/netty-resolver-dns-native-macos-4.1.101.Final-osx-x86_64.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.101.Final/netty-resolver-dns-classes-macos-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final-linux-x86_64.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.101.Final/netty-transport-native-unix-common-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.101.Final/netty-transport-classes-epoll-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.1.13/reactor-netty-core-1.1.13.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-handler-proxy/4.1.101.Final/netty-handler-proxy-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-socks/4.1.101.Final/netty-codec-socks-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-webflux/6.1.1/spring-webflux-6.1.1.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/reactor-core/3.6.0/reactor-core-3.6.0.jar:/Users/maik.hirthe/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/maik.hirthe/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-api/0.12.3/jjwt-api-0.12.3.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-impl/0.12.3/jjwt-impl-0.12.3.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.12.3/jjwt-jackson-0.12.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/opencsv/opencsv/5.9/opencsv-5.9.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-text/1.11.0/commons-text-1.11.0.jar:/Users/maik.hirthe/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/Users/maik.hirthe/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/maik.hirthe/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/maik.hirthe/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/maik.hirthe/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/maik.hirthe/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/maik.hirthe/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/maik.hirthe/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/maik.hirthe/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/maik.hirthe/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/maik.hirthe/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/maik.hirthe/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/maik.hirthe/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/maik.hirthe/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/maik.hirthe/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/maik.hirthe/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/maik.hirthe/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/maik.hirthe/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/maik.hirthe/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/maik.hirthe/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/maik.hirthe/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/maik.hirthe/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/maik.hirthe/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/maik.hirthe/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/maik.hirthe/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/maik.hirthe/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:"/>
    <property name="java.vm.vendor" value="Homebrew"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="user.timezone" value="Europe/Berlin"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="24"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="DE"/>
    <property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk/24.0.1/libexec/openjdk.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/surefire/surefirebooter-20250720171216427_3.jar /Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/surefire 2025-07-20T17-12-16_400-jvmRun1 surefire-20250720171216427_1tmp surefire_0-20250720171216427_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="test" value="*ServiceTest,*ControllerTest,*RepositoryTest"/>
    <property name="surefire.test.class.path" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/test-classes:/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/classes:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/maik.hirthe/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/maik.hirthe/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/maik.hirthe/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/maik.hirthe/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/maik.hirthe/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/maik.hirthe/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/maik.hirthe/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/maik.hirthe/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/maik.hirthe/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/maik.hirthe/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/maik.hirthe/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/maik.hirthe/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/maik.hirthe/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/maik.hirthe/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/maik.hirthe/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/maik.hirthe/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/maik.hirthe/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/maik.hirthe/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/maik.hirthe/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.2.0/spring-boot-starter-webflux-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.2.0/spring-boot-starter-reactor-netty-3.2.0.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.1.13/reactor-netty-http-1.1.13.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-http/4.1.101.Final/netty-codec-http-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-common/4.1.101.Final/netty-common-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-buffer/4.1.101.Final/netty-buffer-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport/4.1.101.Final/netty-transport-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec/4.1.101.Final/netty-codec-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-handler/4.1.101.Final/netty-handler-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-http2/4.1.101.Final/netty-codec-http2-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns/4.1.101.Final/netty-resolver-dns-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver/4.1.101.Final/netty-resolver-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-dns/4.1.101.Final/netty-codec-dns-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.101.Final/netty-resolver-dns-native-macos-4.1.101.Final-osx-x86_64.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.101.Final/netty-resolver-dns-classes-macos-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final-linux-x86_64.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.101.Final/netty-transport-native-unix-common-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.101.Final/netty-transport-classes-epoll-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.1.13/reactor-netty-core-1.1.13.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-handler-proxy/4.1.101.Final/netty-handler-proxy-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/io/netty/netty-codec-socks/4.1.101.Final/netty-codec-socks-4.1.101.Final.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-webflux/6.1.1/spring-webflux-6.1.1.jar:/Users/maik.hirthe/.m2/repository/io/projectreactor/reactor-core/3.6.0/reactor-core-3.6.0.jar:/Users/maik.hirthe/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/maik.hirthe/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-api/0.12.3/jjwt-api-0.12.3.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-impl/0.12.3/jjwt-impl-0.12.3.jar:/Users/maik.hirthe/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.12.3/jjwt-jackson-0.12.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/maik.hirthe/.m2/repository/com/opencsv/opencsv/5.9/opencsv-5.9.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-text/1.11.0/commons-text-1.11.0.jar:/Users/maik.hirthe/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/Users/maik.hirthe/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/maik.hirthe/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/maik.hirthe/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/maik.hirthe/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/maik.hirthe/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/maik.hirthe/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/maik.hirthe/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/maik.hirthe/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/maik.hirthe/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/maik.hirthe/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/maik.hirthe/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/maik.hirthe/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/maik.hirthe/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/maik.hirthe/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/maik.hirthe/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/maik.hirthe/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/maik.hirthe/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/maik.hirthe/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/maik.hirthe/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/maik.hirthe/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/maik.hirthe/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/maik.hirthe/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/maik.hirthe/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/maik.hirthe/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/maik.hirthe/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/maik.hirthe/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/maik.hirthe/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/maik.hirthe/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/maik.hirthe/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/maik.hirthe/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/maik.hirthe/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/maik.hirthe/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/maik.hirthe"/>
    <property name="user.language" value="de"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="/opt/homebrew/Cellar/openjdk/24.0.1/libexec/openjdk.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend/target/surefire/surefirebooter-20250720171216427_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="24.0.1"/>
    <property name="user.name" value="maik.hirthe"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.5"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Homebrew"/>
    <property name="localRepository" value="/Users/maik.hirthe/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/fq/x1yqrzlj0699kzvptjnkdkb00000gq/T/"/>
    <property name="java.version" value="24.0.1"/>
    <property name="user.dir" value="/Users/maik.hirthe/Documents/Dev/gs-mgmt/backend"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="43541"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/maik.hirthe/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Homebrew"/>
    <property name="java.vm.version" value="24.0.1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="java.class.version" value="68.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[gefrierschrank-backend] "/>
  </properties>
  <testcase name="countByUserAndExpired_ShouldReturnExpiredCount" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.309">
    <system-out><![CDATA[Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts
17:12:16.760 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.gefrierschrank.app.repository.ItemRepositoryTest]: ItemRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
17:12:16.801 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.gefrierschrank.app.GefrierschrankApplication for test class com.gefrierschrank.app.repository.ItemRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
&amp#27;[32m :: Spring Boot :: &amp#27;[39m              &amp#27;[2m (v3.2.0)&amp#27;[0;39m

&amp#27;[2m2025-07-20T17:12:16.922+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mc.g.app.repository.ItemRepositoryTest   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Starting ItemRepositoryTest using Java 24.0.1 with PID 43541 (started by maik.hirthe in /Users/maik.hirthe/Documents/Dev/gs-mgmt/backend)
&amp#27;[2m2025-07-20T17:12:16.922+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mc.g.app.repository.ItemRepositoryTest   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m No active profile set, falling back to 1 default profile: "default"
&amp#27;[2m2025-07-20T17:12:17.055+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
&amp#27;[2m2025-07-20T17:12:17.109+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Finished Spring Data repository scanning in 52 ms. Found 3 JPA repository interfaces.
&amp#27;[2m2025-07-20T17:12:17.126+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mbeddedDataSourceBeanFactoryPostProcessor&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Replacing 'dataSource' DataSource bean with embedded version
&amp#27;[2m2025-07-20T17:12:17.175+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.j.d.e.EmbeddedDatabaseFactory       &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Starting embedded database: url='jdbc:h2:mem:de6081aa-fadf-4467-9b4f-a0ac350a4f46;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
&amp#27;[2m2025-07-20T17:12:17.270+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.hibernate.jpa.internal.util.LogHelper &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
&amp#27;[2m2025-07-20T17:12:17.295+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36morg.hibernate.Version                   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000412: Hibernate ORM core version 6.3.1.Final
&amp#27;[2m2025-07-20T17:12:17.305+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.h.c.internal.RegionFactoryInitiator   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000026: Second-level cache disabled
&amp#27;[2m2025-07-20T17:12:17.368+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.o.j.p.SpringPersistenceUnitInfo     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m No LoadTimeWeaver setup: ignoring JPA class transformer
&amp#27;[2m2025-07-20T17:12:17.382+02:00&amp#27;[0;39m &amp#27;[33m WARN&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36morg.hibernate.orm.deprecation           &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
&amp#27;[2m2025-07-20T17:12:17.636+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.h.e.t.j.p.i.JtaPlatformInitiator      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    create table categories (
        id bigint generated by default as identity,
        created_at timestamp(6),
        default_unit varchar(255) not null,
        icon varchar(255),
        max_value numeric(38,2) not null,
        min_value numeric(38,2) not null,
        name varchar(255) not null,
        unit_step numeric(38,2) not null,
        updated_at timestamp(6),
        primary key (id)
    )
Hibernate: 
    create table items (
        id bigint generated by default as identity,
        created_at timestamp(6),
        description varchar(255),
        expiry_date date,
        expiry_type varchar(255) not null check (expiry_type in ('USE_BY','BEST_BEFORE')),
        name varchar(255) not null,
        photo_path varchar(255),
        quantity numeric(38,2) not null,
        unit varchar(255) not null,
        updated_at timestamp(6),
        category_id bigint not null,
        user_id bigint not null,
        primary key (id)
    )
Hibernate: 
    create table users (
        id bigint generated by default as identity,
        created_at timestamp(6) not null,
        email varchar(50) not null,
        password varchar(120) not null,
        role varchar(20) not null check (role in ('USER','ADMIN')),
        updated_at timestamp(6),
        username varchar(20) not null,
        primary key (id)
    )
Hibernate: 
    alter table if exists categories 
       drop constraint if exists UK_t8o6pivur7nn124jehx7cygw5
Hibernate: 
    alter table if exists categories 
       add constraint UK_t8o6pivur7nn124jehx7cygw5 unique (name)
Hibernate: 
    create index idx_item_user_id 
       on items (user_id)
Hibernate: 
    create index idx_item_category_id 
       on items (category_id)
Hibernate: 
    create index idx_item_expiry_date 
       on items (expiry_date)
Hibernate: 
    create index idx_item_created_at 
       on items (created_at)
Hibernate: 
    alter table if exists users 
       drop constraint if exists UK_6dotkott2kjsp8vw4d0m25fb7
Hibernate: 
    alter table if exists users 
       add constraint UK_6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    alter table if exists users 
       drop constraint if exists UK_r43af9ap4edm43mmtq01oddj6
Hibernate: 
    alter table if exists users 
       add constraint UK_r43af9ap4edm43mmtq01oddj6 unique (username)
Hibernate: 
    alter table if exists items 
       add constraint FKjcdcde7htb3tyjgouo4g9xbmr 
       foreign key (category_id) 
       references categories
Hibernate: 
    alter table if exists items 
       add constraint FKft8pmhndq1kntvyfaqcybhxvx 
       foreign key (user_id) 
       references users
&amp#27;[2m2025-07-20T17:12:17.657+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mj.LocalContainerEntityManagerFactoryBean&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
&amp#27;[2m2025-07-20T17:12:17.759+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.d.j.r.query.QueryEnhancerFactory    &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Hibernate is in classpath; If applicable, HQL parser will be used.
&amp#27;[2m2025-07-20T17:12:18.101+02:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m43541&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[gefrierschrank-backend] [           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mc.g.app.repository.ItemRepositoryTest   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Started ItemRepositoryTest in 1.281 seconds (process running for 1.618)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date<current_date
]]></system-out>
    <system-err><![CDATA[WARNING: A Java agent has been loaded dynamically (/Users/maik.hirthe/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
  <testcase name="findByUserAndExpiryDateBetween_ShouldReturnItemsInDateRange" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.02">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date between ? and ? 
    order by
        i1_0.expiry_date
]]></system-out>
  </testcase>
  <testcase name="findByUserWithFilters_NoFilters_ShouldReturnAllUserItems" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.022">
    <failure message="&#10;expected: &quot;Chicken Breast&quot;&#10; but was: &quot;Broccoli&quot;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: "Chicken Breast"
 but was: "Broccoli"
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at com.gefrierschrank.app.repository.ItemRepositoryTest.findByUserWithFilters_NoFilters_ShouldReturnAllUserItems(ItemRepositoryTest.java:222)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    join
        categories c1_0 
            on c1_0.id=i1_0.category_id 
    where
        i1_0.user_id=? 
        and (
            ? is null 
            or i1_0.category_id=?
        ) 
        and (
            ? is null 
            or lower(i1_0.name) like lower(('%'||?||'%')) escape ''
        ) 
        and (
            ?=false 
            or (
                i1_0.expiry_date is not null 
                and i1_0.expiry_date<=?
            )
        ) 
    order by
        case 
            when ?='name' 
                then i1_0.name 
            end,
            case 
                when ?='expiry' 
                    then i1_0.expiry_date 
                end,
                case 
                    when ?='category' 
                        then c1_0.name 
                    end,
                    case 
                        when ?='quantity' 
                            then i1_0.quantity 
                        end desc,
                        i1_0.created_at desc 
                    offset
                        ? rows 
                    fetch
                        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByUserAndExpiryDateBefore_ShouldReturnItemsBeforeDate" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.009">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date<=? 
    order by
        i1_0.expiry_date
]]></system-out>
  </testcase>
  <testcase name="findByUserAndExpired_ShouldReturnExpiredItems" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.008">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date<current_date 
    order by
        i1_0.expiry_date desc
]]></system-out>
  </testcase>
  <testcase name="findByUserAndCategoryOrderByCreatedAtDesc_ShouldReturnCategorySpecificItems" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.012">
    <failure message="&#10;expected: &quot;Chicken Breast&quot;&#10; but was: &quot;Beef Steak&quot;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: "Chicken Breast"
 but was: "Beef Steak"
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at com.gefrierschrank.app.repository.ItemRepositoryTest.findByUserAndCategoryOrderByCreatedAtDesc_ShouldReturnCategorySpecificItems(ItemRepositoryTest.java:143)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.category_id=? 
    order by
        i1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="findByUserWithFilters_SortByName_ShouldSortCorrectly" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.011">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    join
        categories c1_0 
            on c1_0.id=i1_0.category_id 
    where
        i1_0.user_id=? 
        and (
            ? is null 
            or i1_0.category_id=?
        ) 
        and (
            ? is null 
            or lower(i1_0.name) like lower(('%'||?||'%')) escape ''
        ) 
        and (
            ?=false 
            or (
                i1_0.expiry_date is not null 
                and i1_0.expiry_date<=?
            )
        ) 
    order by
        case 
            when ?='name' 
                then i1_0.name 
            end,
            case 
                when ?='expiry' 
                    then i1_0.expiry_date 
                end,
                case 
                    when ?='category' 
                        then c1_0.name 
                    end,
                    case 
                        when ?='quantity' 
                            then i1_0.quantity 
                        end desc,
                        i1_0.created_at desc 
                    offset
                        ? rows 
                    fetch
                        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByUserAndNameContainingIgnoreCase_CaseInsensitive_ShouldWork" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.009">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and lower(i1_0.name) like lower(('%'||?||'%')) escape '' 
    order by
        i1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="findCategoryStatsByUser_ShouldReturnCategoryStatistics" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.009">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.name,
        count(i1_0.id) 
    from
        items i1_0 
    join
        categories c1_0 
            on c1_0.id=i1_0.category_id 
    where
        i1_0.user_id=? 
    group by
        c1_0.name 
    order by
        count(i1_0.id) desc
]]></system-out>
  </testcase>
  <testcase name="countByUserAndCategory_ShouldReturnCategoryCount" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.009">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.category_id=?
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="countByUserAndExpiringSoon_ShouldReturnExpiringCount" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.007">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date between current_date and ?
]]></system-out>
  </testcase>
  <testcase name="findRecentItemsByUser_WithPageable_ShouldReturnRecentItems" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.006">
    <failure message="&#10;expected: &quot;Chicken Breast&quot;&#10; but was: &quot;Broccoli&quot;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: "Chicken Breast"
 but was: "Broccoli"
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at com.gefrierschrank.app.repository.ItemRepositoryTest.findRecentItemsByUser_WithPageable_ShouldReturnRecentItems(ItemRepositoryTest.java:308)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
    order by
        i1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByUserWithFilters_AllFilters_ShouldReturnFilteredResults" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.007">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    join
        categories c1_0 
            on c1_0.id=i1_0.category_id 
    where
        i1_0.user_id=? 
        and (
            ? is null 
            or i1_0.category_id=?
        ) 
        and (
            ? is null 
            or lower(i1_0.name) like lower(('%'||?||'%')) escape ''
        ) 
        and (
            ?=false 
            or (
                i1_0.expiry_date is not null 
                and i1_0.expiry_date<=?
            )
        ) 
    order by
        case 
            when ?='name' 
                then i1_0.name 
            end,
            case 
                when ?='expiry' 
                    then i1_0.expiry_date 
                end,
                case 
                    when ?='category' 
                        then c1_0.name 
                    end,
                    case 
                        when ?='quantity' 
                            then i1_0.quantity 
                        end desc,
                        i1_0.created_at desc 
                    offset
                        ? rows 
                    fetch
                        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByUserOrderByCreatedAtDesc_ShouldReturnUserItemsInDescOrder" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.006">
    <failure message="&#10;expected: &quot;Chicken Breast&quot;&#10; but was: &quot;Broccoli&quot;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: "Chicken Breast"
 but was: "Broccoli"
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at com.gefrierschrank.app.repository.ItemRepositoryTest.findByUserOrderByCreatedAtDesc_ShouldReturnUserItemsInDescOrder(ItemRepositoryTest.java:111)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
    order by
        i1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="repository_ShouldOnlyReturnDataForCorrectUser" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.006">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
    order by
        i1_0.created_at desc
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
    order by
        i1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="findByUserAndNameContainingIgnoreCase_ShouldReturnMatchingItems" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.006">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and lower(i1_0.name) like lower(('%'||?||'%')) escape '' 
    order by
        i1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="countByUser_ShouldReturnCorrectCount" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.005">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=?
]]></system-out>
  </testcase>
  <testcase name="findByUserAndExpiringSoon_ShouldReturnItemsExpiringSoon" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.006">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
        and i1_0.expiry_date is not null 
        and i1_0.expiry_date between current_date and ? 
    order by
        i1_0.expiry_date
]]></system-out>
  </testcase>
  <testcase name="findByUserOrderByCreatedAtDesc_WithPageable_ShouldReturnPagedResults" classname="com.gefrierschrank.app.repository.ItemRepositoryTest" time="0.007">
    <failure message="&#10;expected: &quot;Chicken Breast&quot;&#10; but was: &quot;Broccoli&quot;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: "Chicken Breast"
 but was: "Broccoli"
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at com.gefrierschrank.app.repository.ItemRepositoryTest.findByUserOrderByCreatedAtDesc_WithPageable_ShouldReturnPagedResults(ItemRepositoryTest.java:132)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (created_at, email, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        categories
        (created_at, default_unit, icon, max_value, min_value, name, unit_step, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        items
        (category_id, created_at, description, expiry_date, expiry_type, name, photo_path, quantity, unit, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        i1_0.id,
        i1_0.category_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.expiry_date,
        i1_0.expiry_type,
        i1_0.name,
        i1_0.photo_path,
        i1_0.quantity,
        i1_0.unit,
        i1_0.updated_at,
        i1_0.user_id 
    from
        items i1_0 
    where
        i1_0.user_id=? 
    order by
        i1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        count(i1_0.id) 
    from
        items i1_0 
    where
        i1_0.user_id=?
]]></system-out>
  </testcase>
</testsuite>